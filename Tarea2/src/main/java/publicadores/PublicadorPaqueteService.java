
package publicadores;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Properties;

import javax.xml.namespace.QName;
import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceException;
import jakarta.xml.ws.WebServiceFeature;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.0
 * Generated source version: 3.0
 * 
 */
@WebServiceClient(name = "PublicadorPaqueteService", targetNamespace = "http://publicadores/")
public class PublicadorPaqueteService
    extends Service
{

    private final static URL PUBLICADORPAQUETESERVICE_WSDL_LOCATION;
    private final static WebServiceException PUBLICADORPAQUETESERVICE_EXCEPTION;
    private final static QName PUBLICADORPAQUETESERVICE_QNAME = new QName("http://publicadores/", "PublicadorPaqueteService");

    static {
        URL url = null;
        WebServiceException e = null;
        String home = System.getProperty("user.home");
        String filepath = home + "/.turismoUy/web.properties"; //linux, mac
		//String filepath = home + "\\.turismoUy\\config.properties"; //pc
		String port = "";
	    String dir = "";
	    
	    
	    Properties prop = new Properties();
	    try {
			FileInputStream input = new FileInputStream(filepath);
			try {
				prop.load(input);
				input.close();
			} catch (IOException error) {
				// TODO Auto-generated catch block
				error.printStackTrace();
			}
		} catch (FileNotFoundException error) {
			// TODO Auto-generated catch block
			error.printStackTrace();
		}
	  
	    dir = prop.getProperty("ip");
	    port = prop.getProperty("port");
	            
        try {
            url = new URL(dir+port+"/publicadorPaquete?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        PUBLICADORPAQUETESERVICE_WSDL_LOCATION = url;
        PUBLICADORPAQUETESERVICE_EXCEPTION = e;
    }

    public PublicadorPaqueteService() {
        super(__getWsdlLocation(), PUBLICADORPAQUETESERVICE_QNAME);
    }

    public PublicadorPaqueteService(WebServiceFeature... features) {
        super(__getWsdlLocation(), PUBLICADORPAQUETESERVICE_QNAME, features);
    }

    public PublicadorPaqueteService(URL wsdlLocation) {
        super(wsdlLocation, PUBLICADORPAQUETESERVICE_QNAME);
    }

    public PublicadorPaqueteService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, PUBLICADORPAQUETESERVICE_QNAME, features);
    }

    public PublicadorPaqueteService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PublicadorPaqueteService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns PublicadorPaquete
     */
    @WebEndpoint(name = "PublicadorPaquetePort")
    public PublicadorPaquete getPublicadorPaquetePort() {
        return super.getPort(new QName("http://publicadores/", "PublicadorPaquetePort"), PublicadorPaquete.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PublicadorPaquete
     */
    @WebEndpoint(name = "PublicadorPaquetePort")
    public PublicadorPaquete getPublicadorPaquetePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://publicadores/", "PublicadorPaquetePort"), PublicadorPaquete.class, features);
    }

    private static URL __getWsdlLocation() {
        if (PUBLICADORPAQUETESERVICE_EXCEPTION!= null) {
            throw PUBLICADORPAQUETESERVICE_EXCEPTION;
        }
        return PUBLICADORPAQUETESERVICE_WSDL_LOCATION;
    }

}
